package ofm;

@CrossOrigin
@RestController
@RequestMapping("/user")
public class FolderController {
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private FileRepository fileRepository;
	
	@Autowired
	private FolderRepository folderRepository;
	
	@Autowired
	private IdRepository idRepository;

	@Autowired
	private PhotoRepository photoRepository;
	
	public FolderController(FileRepository entry_fileRepository, FolderRepository entry_folderRepository, IdRepository entry_idRepository, PhotoRepository entry_photoRepository) {
		this.fileRepository = entry_fileRepository;
		this.folderRepository = entry_folderRepository;
		this.idRepository = entry_idRepository;
		this.photoRepository = entry_photoRepository;
	}
		
	@GetMapping("/all")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FolderModel> getAllFolders() {
		logger.info("Getting all folders.");
		return folderRepository.findAll();
	}

	// Top level files and folders
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@GetMapping
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List getTopLevel() {
		logger.info("Getting all top-level folders.");
		List merged = new ArrayList(folderRepository.findByParentId(0));
        merged.addAll(fileRepository.findByParentId(0));
		return merged;
	}
	
	// get current level folders and files
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@GetMapping("/{id}")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List getCurrLevel(@PathVariable Integer id) {
		logger.info("Getting folders with ID: {}.", id);
		List merged = new ArrayList(folderRepository.findByParentId(id));
		merged.addAll(fileRepository.findByParentId(id));
		return merged;
	}
	
	@GetMapping("/{id}/single_folder")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FolderModel> getFolder(@PathVariable Integer id) {
		logger.info("Getting folders with ID: {}.", id);
		
		boolean found = false;
		List<FolderModel> folders = new ArrayList<FolderModel>(folderRepository.findAll());
		for(FolderModel f: folders) {
			if(f.getId() == id) {
				found = true;
				break;
			}
		}
		
		List<FolderModel> folder = new ArrayList<FolderModel>(); 
		if(found == true) {
			Optional<FolderModel> folderModel = folderRepository.findById(id);
			folder.add(folderModel.get());
		}
		else {
			FolderModel f = new FolderModel();
			f.setId(-1);
			f.setIsFolder(0);
			folder.add(f);
		}
		return folder;
	}
	
	@GetMapping("/{id}/parent")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FolderModel> getParentFolder(@PathVariable Integer id) {
		logger.info("Getting folders with ID: {}.", id);
		
		boolean found = false;
		List<FolderModel> folders = new ArrayList<FolderModel>(folderRepository.findAll());
		for(FolderModel f: folders) {
			if(f.getId() == id) {
				found = true;
				break;
			}
		}
		
		List<FolderModel> folder = new ArrayList<FolderModel>(); 
		
		// if the folder exists
		if(found == true) {
			Optional<FolderModel> folderModel = folderRepository.findById(id);
			Optional<FolderModel> parentFolder = Optional.ofNullable(new FolderModel());
			
			// if the folder has parent
			if( folderModel.get().getParentId() != 0) {
				parentFolder = folderRepository.findById(folderModel.get().getParentId());
			}
			// if the folder doesn't have parent
			else {
				parentFolder.get().setId(-1);
			}
			folder.add(parentFolder.get());
		}
		// if the folder doesn't exists
		else {
			FolderModel f = new FolderModel();
			f.setId(-1);
			f.setIsFolder(0);
			folder.add(f);
		}
		return folder;
	}
	
	// get the Photo
	@GetMapping("/{id}/images")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<PhotoModel> getImages(@PathVariable Integer id) throws IOException {
		logger.info("getting group of photo with belong folder Id: {}.", id);
		List<PhotoModel> photos = photoRepository.findByParentId(id);
		return photos;
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public FolderModel CreateFolder(@RequestBody FolderModel folder) {
		logger.info("Saving folder...");
		List<FolderModel> L = new ArrayList<FolderModel>(folderRepository.findByParentId(0));
		
		// get Id class
		IdModel id = idRepository.findById(1).get();
		
		if(L.size() == 0) {
			folder.setId(1);	
		}else {
			folder.setId(id.getValue());	
		}
		// update id
		Integer nextId = id.getValue();
		nextId++;
		id.setValue(nextId);
		idRepository.save(id);
		
		// update folder
		folderRepository.save(folder);
		return folder;
	}
	
	// delete the folder (including its sub-folder and files)
	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteFolder(@PathVariable Integer id) {
		FolderModel folder = folderRepository.findById(id).get();
		logger.info("Deleting folders.");
			
		// get sub folders
		List<FolderModel> subFolders = folderRepository.findByParentId(folder.getId());
				
		// check if this folder contains any sub folders
		if(subFolders.size() != 0) {
			logger.info("deleteFolder - processing folder " + folder.getName());
			for (FolderModel f: subFolders) {
				_deleteFolder(f);
			}
		}
		
		// after cleaning up its sub folder and files, start deleting the current level files
		List<FileModel> files = fileRepository.findByParentId(folder.getId());
		
		// if this folder't contain any file, it will only delete folder itself
		// otherwise delete file(s) through a loop
		if(files.size() != 0) {
			for(FileModel f: files) {
				logger.info("deleteFolder - processing file " + f.getName());
				fileRepository.delete(f);
			}
		}
		
		// after cleaning up its sub folder and files, start deleting the current level files
		List<PhotoModel> photos = photoRepository.findByParentId(folder.getId());
		
		// if this folder't contain any file, it will only delete folder itself
		// otherwise delete file(s) through a loop
		if(photos.size() != 0) {
			for(PhotoModel p: photos) {
				logger.info("deleteFolder - processing actual file " + p.getName());
				photoRepository.delete(p);
			}
		}
		
		// delete folder itself at the end of the method
		folderRepository.delete(folder);
	}
	
	// Recursion function
	// helper function to delete all the sub folders and files
	// always delete files first then folder after
	public void _deleteFolder(FolderModel folder) {
	
		// check if this folder contains any sub folders
		List<FolderModel> folders = folderRepository.findByParentId(folder.getId());
		
		if(folders.size() != 0) {
			// loop through each folder and delete its sub folders and files
			for (FolderModel f: folders) {
				logger.info("_deleteFolder - processing folder" + f.getName());
				_deleteFolder(f);
			}
		}
		
		// if this folder doesn't contain any sub folder(s), start deleting file
		List<FileModel> files = fileRepository.findByParentId(folder.getId());
			
		// if this folder't contain any file, it will only delete folder itself
		// otherwise delete file(s) through a loop
		if(files.size() != 0) {
			for(FileModel f: files) {
				logger.info("_deleteFolder - processing file " + f.getName());
				fileRepository.delete(f);
			}
		}
		
		
		// after cleaning up its sub folder and files, start deleting the current level files
		List<PhotoModel> photos = photoRepository.findByParentId(folder.getId());
		
		// if this folder't contain any file, it will only delete folder itself
		// otherwise delete file(s) through a loop
		if(photos.size() != 0) {
			for(PhotoModel p: photos) {
				logger.info("deleteFolder - processing actual file " + p.getName());
				photoRepository.delete(p);
			}
		}
		
		// delete the folder at current level
		folderRepository.delete(folder);
	}
	
}