package ofm.controller;

import org.bson.BsonBinarySubType;
import org.bson.types.Binary;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import ofm.models.FileModel;
import ofm.models.FolderModel;
import ofm.models.IdModel;
import ofm.models.PhotoModel;
import ofm.repository.FileRepository;
import ofm.repository.FolderRepository;
import ofm.repository.IdRepository;
import ofm.repository.PhotoRepository;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@CrossOrigin
@RestController
@RequestMapping(value = "/file")
public class FileController {
	private final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private FileRepository fileRepository;
	
	@Autowired
	private FolderRepository folderRepository;
	
	@Autowired
	private IdRepository idRepository;
	
	@Autowired
	private PhotoRepository photoRepository;

	public FileController(FileRepository entry_fileRepository, FolderRepository entry_folderRepository, IdRepository entry_idRepository, PhotoRepository entry_photoRepository) {
		this.fileRepository = entry_fileRepository;
		this.folderRepository = entry_folderRepository;
		this.idRepository = entry_idRepository;
		this.photoRepository = entry_photoRepository;
	}
		
	// Show All Files
	@GetMapping("/all")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FileModel> getAllFiles() {
		logger.info("Getting all files.");
		return fileRepository.findAll();
	}
	
	// List Top-level Files
	@GetMapping
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FileModel> getTopLvFiles() {
		logger.info("Getting top-level files.");
		return fileRepository.findByParentId(0);
	}

	// get a single file
	@GetMapping("/{id}")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public FileModel getFile(@PathVariable Integer id) {
		logger.info("Getting file with ID: {}.", id);
		Optional<FileModel> fileModel = fileRepository.findById(id);
		return fileModel.get();
	}
	
	// get the belong folder of the file
	@GetMapping("/{id}/parent")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public FolderModel getBelongFolder(@PathVariable Integer id) {
		logger.info("Getting this file's belong folders with ID: {}.", id);
		Optional<FileModel> file = fileRepository.findById(id);
		System.out.println("Parentid: " + file.get().getParentId());
		Optional<FolderModel> belongFolder = folderRepository.findById(file.get().getParentId());
		return belongFolder.get();
	}
	
	// get the single Photo
	@GetMapping("/{id}/image")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<PhotoModel> getImage(@PathVariable Integer id) throws IOException {
		logger.info("Viewing file with ID: {}.", id);
		PhotoModel p = photoRepository.findById(id).get();
		List<PhotoModel> photo = new ArrayList<PhotoModel>();
		photo.add(p);
		return photo;
	}
		
	// view the file in byte []
	@GetMapping("/{id}/view")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public String viewFile(@PathVariable Integer id) throws IOException {
		logger.info("Viewing file with ID: {}.", id);
		PhotoModel photo = photoRepository.findById(id).get();
		return Base64.getEncoder().encodeToString(photo.getImage().getData());
	}
	
	// delete a file
	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteFile(@PathVariable Integer id) {
		
		// delete info file
		FileModel model = fileRepository.findById(id).get();
		logger.info("Deleting file.");		
		fileRepository.delete(model);
		
		// delete actual file
		PhotoModel photo = photoRepository.findById(id).get();
		logger.info("Deleting actual file.");	
		photoRepository.delete(photo);
	}
	   
   // upload the file (not adding any folder)
   // assuming that the file with the same name is the same file
   @PostMapping
   @ResponseStatus(HttpStatus.CREATED)
   public FileModel uploadFile(@RequestParam("file") MultipartFile file, @RequestParam("folderId") Integer folderId) throws IOException {
	   logger.info("Upload files.");
	   
	   // to check the file version, we need to check
	   // if there is a file with same name and in same folder
	   List<FileModel> files = fileRepository.findAll(); 
	   int curr_version = 1;
	   
	   // find the current version of the file
	   // if the file already exists in database, keep looking for the latest version
	   for(FileModel f: files) {
		   if(f.getName().equals(file.getOriginalFilename()) && 
				   curr_version <= f.getFileVersion() && folderId == f.getParentId()) {
			   curr_version++;
		   }
	   }
	   		
	   // find the Id value for the new file
	   IdModel idModel = idRepository.findById(1).get();
	   Integer id = idModel.getValue();
	 
	   // upload image file to MongoDB (bson)
       PhotoModel photo = new PhotoModel();
       photo.setId(id);
       photo.setImage(new Binary(BsonBinarySubType.BINARY, file.getBytes()));
       photo.setName(file.getOriginalFilename());
       photo.setParentId(folderId);
       photo.setCreationDate(new Date());
       photo.setFileVersion(curr_version);
       photoRepository.save(photo);
	   
	   // Upload the file info to MongoDB (json)
	   FileModel newFile = new FileModel();
	   newFile.setName(file.getOriginalFilename());
	   newFile.setFileVersion(curr_version);
	   newFile.setParentId(folderId);
	   newFile.setId(id);
	   newFile.setCreationDate(new Date());
	   logger.info(newFile.toString());
	   
	   // update the id for the next post request
	   idModel.setValue(id+1);
	   idRepository.save(idModel);
	   
	   return fileRepository.save(newFile);
	   
	   // this will return String of image's value in base64 byte []
//	   PhotoModel p = photoRepository.findById(id).get();
//	   Base64.getEncoder().encodeToString(p.getImage().getData());
	   
	}
   
 	// helper function
  	// use regular expression to find the wanted value
  	public String findValue(String pattern, String target) {
  		
  		String returnval = "";
  		
  		// Create a Pattern object
  		Pattern r = Pattern.compile(pattern);
  		
  		// Now create matcher object.
  		Matcher m = r.matcher(target);
  		if (m.find()) {
  			returnval = m.group(0);
  			if(returnval.contains("."))
  				returnval = returnval.replace(".", "");
  		}
  		else {
  			returnval = "NOT FOUND!";
  		}
  		return returnval;
  	}
}