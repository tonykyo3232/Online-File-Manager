package ofm;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping(value = "/file")
public class FileController {
	private final Logger logger = LoggerFactory.getLogger(getClass());

	private FileRepository fileRepository;
	private FolderRepository folderRepository;

	public FileController(FileRepository entry_fileRepository, FolderRepository entry_folderRepository) {
		this.fileRepository = entry_fileRepository;
		this.folderRepository = entry_folderRepository;
	}
	
	// dummy method for testing the connection
	@RequestMapping(value = "/hello", method = RequestMethod.GET)
	public String greetings() {
		logger.info("Greetings!");
		return "Hello! from FileController!";
	}
	
	// Top level files
	@GetMapping("/all")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FileModel> getAllFiles() {
		logger.info("Getting all files.");
		return fileRepository.findAll();
	}
	
	// Top level files
	@GetMapping
	@ResponseStatus(HttpStatus.ACCEPTED)
	public List<FileModel> getTopLvFiles() {
		logger.info("Getting top-level files.");
		return fileRepository.findByBelFolderId(0);
	}

	@GetMapping("/{id}")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public FileModel getFile(@PathVariable long id) {
		logger.info("Getting file with ID: {}.", id);
		Optional<FileModel> fileModel = fileRepository.findById(id);
		return fileModel.get();
	}
	
	@GetMapping("/{id}/parent")
	@ResponseStatus(HttpStatus.ACCEPTED)
	public FolderModel getBelongFolder(@PathVariable long id) {
		logger.info("Getting this file's belong folders with ID: {}.", id);
		Optional<FileModel> file = fileRepository.findById(id);
		System.out.println("Parentid: " + file.get().getBelFolderId());
		Optional<FolderModel> belongFolder = folderRepository.findById(file.get().getBelFolderId());
		return belongFolder.get();
	}
	
	@PostMapping("/create")
	@ResponseStatus(HttpStatus.CREATED)
	public FileModel createFile(@RequestBody FileModel file) {
		logger.info("Upload files.");
		return fileRepository.save(file);
	}
	
	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteFile(@PathVariable Long id) {
		FileModel model = fileRepository.findById(id).get();
		logger.info("Deleting files.");
		fileRepository.delete(model);
	}
	   
   // upload the file (not adding any folder)
   // special case for top level
   @PostMapping("/upload")
   @ResponseStatus(HttpStatus.CREATED)
   public FileModel uploadFile(@RequestParam("file") MultipartFile file, @RequestParam("folderId") String folderId, @RequestParam("fileId") String fileId) throws IOException {
	   logger.info("Upload files.");

	   System.out.println("folderId is: " + Integer.parseInt(folderId));
	   folderRepository.findById(Integer.parseInt(folderId));
	   
	   // to check the file version, we need to check
	   // if there is a file with same name and in same folder
	   List<FileModel> files = fileRepository.findAll(); 
	   int curr_version = 1;
	   
	   // find the current version of the file
	   // if the file already exists in database, keep looking for the latest version
	   for(FileModel f: files) {
		   if(f.getName().equals(file.getOriginalFilename()) && 
				   curr_version <= f.getFileVersion()) {
			   curr_version++;
		   }
	   }
	   
	   // upload the file to local disk
	   File uploadedFile;
	   
	   if(Integer.parseInt(folderId) == 0) {
		   if(curr_version == 1) {
			   uploadedFile = new File(System.getProperty("user.dir") + "/fileIO/localDB/" + file.getOriginalFilename());
		   }
		   else {
			   uploadedFile = new File(System.getProperty("user.dir") + "/fileIO/localDB/" + "(" + curr_version + ")" + file.getOriginalFilename());
		   }
	   }
	   else {
		   if(curr_version == 1) {
			   uploadedFile = new File(System.getProperty("user.dir") + "/fileIO/localDB/" + file.getOriginalFilename());
		   }
		   else {
			   uploadedFile = new File(System.getProperty("user.dir") + "/fileIO/localDB/" + "(" + curr_version + ")" + file.getOriginalFilename());
		   }
	   }
	   
	   uploadedFile.createNewFile();
		
	   try (FileOutputStream fout = new FileOutputStream(uploadedFile)) {
			fout.write(file.getBytes());
	   }catch(Exception e) {
			e.printStackTrace();
		}
		
	   // Upload the file info to MongoDB
	   FileModel newFile = new FileModel();
	   newFile.setName(file.getOriginalFilename());
	   newFile.setFileVersion(curr_version);
	   newFile.setBelFolderId(Integer.parseInt(folderId));
	   newFile.setId(Integer.parseInt(fileId));
	   newFile.setCreationDate(new Date());
	   logger.info(newFile.toString());
	   return fileRepository.save(newFile);
	}
}